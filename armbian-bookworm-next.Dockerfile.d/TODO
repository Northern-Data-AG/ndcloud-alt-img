# * disable HDMI
#   https://forum.armbian.com/topic/8176-migrating-form-fex-how-to-disable-hdmi-wifi-and-other/
#
#   A way to disable hardware is by setting its status to disabled in the device tree, 
#   take a look at 
#
#     "dtc -I fs -O dts /sys/firmware/devicetree/base"
#
#   to see the runtime devicetree. For instance for sound and video this would look 
#   like below, which you can convert to dtb with something like 
#
#     "dtc -I dts -O dtb youroverlay.dts > youroverlay.dtb" 
#
#   and add as a user-overlay (place dtb file in /boot/overlay-user) 
#   and add "user-overlays=youroverlay" line in /boot/armbianEnv.txt.

#   /dts-v1/;
#   
#   / {
#       compatible = "allwinner,sun8i-h3","allwinner,sun50i-h5","friendlyarm,nanopi-neo2";
#   
#       fragment@0 {
#           target-path = "/soc";
#   
#           __overlay__ {
#   
#               hdmi@1ee0000 {
#                           status = "disabled";
#               };
#               mixer@1100000 {
#                            status = "disabled";
#               };
#               sound {
#                            status = "disabled";
#                };
#           };
#       };
#   
#       fragment@1 {
#           target-path = [2f 00];
#   
#           __overlay__ {
#                 sound {
#                            status = "disabled";
#                 };
#           };
#       };
#   };


#
# * add user DTBOs
#     https://forum.armbian.com/topic/23166-activation-of-eth0-on-banana-pi-m2-zero-how-to-do-best/
#       https://forum.armbian.com/topic/23166-activation-of-eth0-on-banana-pi-m2-zero-how-to-do-best/
#     https://forum.armbian.com/topic/19625-spi-issues-with-banana-pi-m2-zero-wrong-sensor-readings-and-spi-display-not-working/
#       https://forum.banana-pi.org/t/spidev-not-found-in-armbian-with-bpi-m2z/13190
#       https://forum.banana-pi.org/t/banana-pi-bpi-m4-how-to-get-i2c-and-spi-running-tutorial/12824
#       https://hackaday.io/page/14523-changing-i2c-clock-speed-sdc-on-banana-pi-bpi-m2-zero-armbian
#
# ? https://spotpear.com/index/study/detail/id/676.html
#
# * python3 bme280 code
#     import time
#     import smbus2
#     import bme280
#     
#     # BME280 sensor address (default address)
#     address = 0x77
#     
#     # Initialize I2C bus
#     bus = smbus2.SMBus(0)
#     
#     # Load calibration parameters
#     calibration_params = bme280.load_calibration_params(bus, address)
#     
#     def celsius_to_fahrenheit(celsius):
#         return (celsius * 9/5) + 32
#     
#     while True:
#         try:
#             # Read sensor data
#             data = bme280.sample(bus, address, calibration_params)
#     
#             # Extract temperature, pressure, and humidity
#             temperature_celsius = data.temperature
#             pressure = data.pressure
#             humidity = data.humidity
#     
#             # Convert temperature to Fahrenheit
#             temperature_fahrenheit = celsius_to_fahrenheit(temperature_celsius)
#     
#             # Print the readings
#             print("Temperature: {:.2f} °C, {:.2f} °F".format(temperature_celsius, temperature_fahrenheit))
#             print("Pressure: {:.2f} hPa".format(pressure))
#             print("Humidity: {:.2f} %".format(humidity))
#     
#             # Wait for a few seconds before the next reading
#             time.sleep(2)
#     
#         except KeyboardInterrupt:
#             print('Program stopped')
#             break
#         except Exception as e:
#             print('An unexpected error occurred:', str(e))
#             break
